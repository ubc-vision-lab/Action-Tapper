######################################################
# AB & Tap                                           #
# T1: Signal to Tap; T2: Lag 1 to 8                  #
# Does tap aid T2 identification?                    #
######################################################

####################################################################
int cblocks=8;                         # total number of blocks
int ctrials=80;                        # number of trials per block
array <int> trialtype[ctrials][6];     # 6 is the data we collect
string path="tap1_";
####################################################################

string fn; # participant number
string confirm; # confirmation input for pn
int z; 
int zz;

loop z=1 until z==2 # run this until you get confirmed input from experimenter
begin
   number_text.set_caption ("Type in participant number (two digits max)...\n" );
   number_text.redraw();
   number_trial.present();
   system_keyboard.set_max_length(12);
   fn = system_keyboard.get_input();
   number_text.set_caption ("Participant number is: " + fn + "\nIs this correct (y/n)?" );
   number_text.redraw();
   number_trial.present();
   system_keyboard.set_max_length(1);
   confirm = system_keyboard.get_input();
   if (confirm=="y" || confirm=="Y") then # comfirmed correct from experimenter
      z=z+1
   end;   
end;

debug_out.open (path+fn+".dat");
debug_out.print ("Trial #, Distractor, Lag, T1, T2, Tap RT, T2 Key\n");

array<string> rsvpid[] = {"1","2","3","4","5","6","7","8","9"}; # in order from 1 through 9

array<string> distid[] = {"1","2","3","4","5","6","7","8","9"}; # in order from 1 through 9

array<string> targid[22];
targid[1]="A";
targid[2]="B";
targid[3]="C";
targid[4]="D";
targid[5]="E";
targid[6]="F";
targid[7]="G";
targid[8]="H";
targid[9]="J";
targid[10]="K";
targid[11]="L";
targid[12]="M";
targid[13]="N";
targid[14]="R";
targid[15]="S";
targid[16]="T";
targid[17]="U";
targid[18]="V";
targid[19]="W";
targid[20]="X";
targid[21]="Y";
targid[22]="***";

array<string> mask[5];
mask[1]="@";
mask[2]="#";
mask[3]="%";
mask[4]="&";
mask[5]="?";

sub
   init_conds (array<int,2>& trialarr) # name of subroutine; type of argument passed to it; name
begin                                  # of variable to be used in subroutine
   int k;
   int f;
   int counter=0;
   loop f=1 until f==5
   begin
      loop k=1 until k==16
      begin
         counter=counter+1;
         trialarr[counter][1]=1;       #distractor (1=symbols, 2=pseudoletters)
            trialarr[counter][2]=k;       #Lag (1=100ms, 2=200ms ... 8=800ms)
            trialarr[counter][3]=-99;     #T1  
            trialarr[counter][4]=-99;     #T2 
            trialarr[counter][5]=-99;     #Tap Response RT
            trialarr[counter][6]=-99;     #T2 Response
        k=k+1;
      end; # k loop
   f=f+1;
   end;
end;


sub
   shuffle (array<int,2>& trialarr) # name of subroutine; type of argument passed to it; name
begin                               # of variable to be used in subroutine
   int j;
   int pos1;
   int temp1;
   int temp2;
   loop j=1 until j > trialarr.count()
   begin #fisher yates shuffle
      pos1 = random(j,trialarr.count()); #choose a random number from [current index] to [end]
      #swap [current index] with [randomly chosen index] 
      temp1 = trialarr[j][1];
      temp2 = trialarr[j][2];
      trialarr[j][1] = trialarr[pos1][1];
      trialarr[j][2] = trialarr[pos1][2];
      trialarr[pos1][1] = temp1;
      trialarr[pos1][2] = temp2;
      #as we iterate throught the array, we leave a shuffled deck in our path
      j=j+1;
   end;  
end; 

sub
   outstuff (int& block, array<int,2>& trialarr) # name of subroutine; type of argument passed to it; name
begin                                            # of variable to be used in subroutine
   int j;      
   loop j=1 until j==61
   begin
      debug_out.print (j);                # trial
      debug_out.print (",");
      debug_out.print (trialarr[j][1]);   # distractor type
      debug_out.print (",");
      debug_out.print (trialarr[j][2]);   # lag
      debug_out.print (",");   
      debug_out.print (trialarr[j][3]);   # t1
      debug_out.print (",");
      debug_out.print (trialarr[j][4]);   # t2
      debug_out.print (",");   
      debug_out.print (trialarr[j][5]);   # tap RT
      debug_out.print (",");
      debug_out.print (trialarr[j][6]);   # T2 resp
      debug_out.print ("\n");
      j=j+1;
   end;
end;

int i;
int j;
int k;
int l;
int l1;
int l2;
int l3;
int ll;
int m;
int n;
int nn;
int o;
int p;
int p1;
int p2;
int p3;
int pp;
int q;
int r;
int lastr;  
int dummy;
int t1acc;
int t2acc;
int xblocks;
int xtrials;
int bbbueno;

output_port oport = output_port_manager.get_port(1);

inst_trial.present();

loop i = 1 until i > postt1.count() # fill the trial with events
begin
   postt1_trial.add_stimulus_event(postt1[i]);
   postt1_trial.add_stimulus_event(isi_stim);
   # postt1_trial add stimulus
   # set the delta t
   # add the isi_text stimulus
   # set the delta t
end;

loop xblocks=1 until xblocks == cblocks+1              #actually, do the experiment
begin
   init_conds (trialtype);
   shuffle (trialtype);
  
   loop xtrials=1 until xtrials == ctrials+1
   begin   
   
      # This part displays the fixation
      fix_trial.present();
      
      # This part does the 6-12 RSVP items between the offset of fixation and onset of T1   
      if (trialtype[xtrials][1]==1) then
         l1=random(6,12);
         lastr=0;
         loop l2=1 until l2==l1+1
         begin
            dummy=1;                      #pick a digit, but don't repeat the last one
            loop dummy=1 until dummy==2
            begin
               r=random(1,9);
               if (r!=lastr) then
                  dummy=dummy+1;
                  lastr=r;
               end;
            end;      
            rsvp.set_caption(distid[r]);
            rsvp.redraw();
            rsvpdig_event.set_duration(9);
            rsvpdig_trial.present();
         
            isi_event.set_stimulus(default);
            isi_event.set_event_code("ISI");
            isi_event.set_duration(39);
            isi_trial.present(); 
            l2=l2+1; 
         end;
      end;

   # This part does the "***" alert to tap
   oport.send_code(1);
   trialtype[xtrials][3] = 22;  
   t1.set_caption(targid[trialtype[xtrials][3]]);
   t1.redraw();
   t1_event.set_duration(9);
   bbbueno=clock.time();
   t1_trial.present();
   
   # This part displays the ISI                   
   isi_event.set_stimulus(default);
   isi_event.set_event_code("ISI");
   isi_event.set_duration(39);
   isi_trial.present();

   if (trialtype[xtrials][1]==1) then
      loop l2=1 until l2>postt1.count()
      begin
         dummy=1;                      #pick a digit, but don't repeat the last one
         loop dummy=1 until dummy==2   # don't question it, just accept it (for now)
         begin
            r=random(1,9);
            if (r!=lastr) then
               dummy=dummy+1;
               lastr=r;
            end;
         end;
         postt1[l2].get_stimulus.setcaption(distid[r]);
         postt1[l2].get_stimulus.redraw();
         l2=l2+1;
      end;
    end;
       
   # This part does the second target (letter)
   loop z=1 until z==2
   begin
      trialtype[xtrials][4] = random (1, 21);   # feel like this should be postt1.count()/2 + 1 but...
      if (trialtype[xtrials][4] != trialtype[xtrials][3]) then
         z=z+1;
      end;
   end;
   if (trialtype[xtrials][2]*2 <= 15) then
      postt1[trialtype[xtrials][2]*2].get_stimulus.set_caption(targid[trialtype[xtrials][4]]);
      postt1[trialtype[xtrials][2]*2].redraw();
   end;
   postt1_trial.present();

   response_data last = response_manager.last_response_data();

   trialtype[xtrials][5] = last.time() - bbbueno; # reaction time
   
   if (trialtype[xtrials][5]<200) then
      if (trialtype[xtrials][5]<0) then
         notap_trial.present();
      else
         toofast_trial.present();
      end;
   elseif (trialtype[xtrials][5]>199 && trialtype[xtrials][5]<1501) then
      justright_trial.present();
   else # trialtype[xtrials][5]>1500
      tooslow_trial.present();
   end;

   # This part displays a blank screen and waits for the T2 response
   t2resp_event.set_target_button(trialtype[xtrials][4]);      #set target button to T2 value
   t2resp_trial.present();
   trialtype[xtrials][6] = response_manager.last_response();

   xtrials=xtrials+1; 
   end;
   outstuff (xblocks, trialtype);       #output trial data to a file named above
   xblocks=xblocks+1;
if (xblocks < cblocks+1) then
   block_trial.present();
end;
end;   
done_trial.present();