######################################################
# AB & Tap                                           #
# T1: Signal to Tap; T2: Lag 1 to 8                  #
# Does tap aid T2 identification?                    #
######################################################

####################################################################
int nBlocks=8;                       # total number of blocks
int nTrials=60;                       # number of trials per block
array <int> trialtype[nTrials][9];  # nTrials is the number of trials
int nStim = 40;						    # MUST MATCH VALUE OF $nStim in sce!!
int maxRSVPs = 12;
string path="tap1_";
####################################################################

include "init_output.pcl"

array<string> rsvpid[9];
rsvpid[1]="1";
rsvpid[2]="2";
rsvpid[3]="3";
rsvpid[4]="4";
rsvpid[5]="5";
rsvpid[6]="6";
rsvpid[7]="7";
rsvpid[8]="8";
rsvpid[9]="9";

array<int> lag[4];
lag[1] = 1;
lag[2] = 6;

array<string> distid[9];
distid[1]="1";
distid[2]="2";
distid[3]="3";
distid[4]="4";
distid[5]="5";
distid[6]="6";
distid[7]="7";
distid[8]="8";
distid[9]="9";

array<string> targid[23];
targid[1]="A";
targid[2]="B";
targid[3]="C";
targid[4]="D";
targid[5]="E";
targid[6]="F";
targid[7]="G";
targid[8]="H";
targid[9]="J";
targid[10]="K";
targid[11]="L";
targid[12]="M";
targid[13]="N";
targid[14]="R";
targid[15]="S";
targid[16]="T";
targid[17]="U";
targid[18]="V";
targid[19]="W";
targid[20]="X";
targid[21]="Y";
targid[22]="***";
targid[23]="*****";

array<string> mask[5];
mask[1]="@";
mask[2]="#";
mask[3]="%";
mask[4]="&";
mask[5]="?";

string toofast_msg   = "Too fast!";
string tooslow_msg   = "Too slow!";
string justright_msg = "Good tap!";
string notap_msg     = "Didn't tap!";


sub
   init_conds (array<int,2>& trialarr) # name of subroutine; type of argument passed to it; name
begin                                  # of variable to be used in subroutine       
    loop int k=1 until k>nTrials begin
      trialarr[k][1]=1;       #distractor (1=symbols, 2=pseudoletters)
      trialarr[k][2]=(k%16)+1;#Lag (1=100ms, 2=200ms ... 8=800ms)
      trialarr[k][3]=-99;     #Tap1 RT
      trialarr[k][4]=-99;     #Tap1 RT Bin
      trialarr[k][5]=-99;     #Tap2 RT
      trialarr[k][6]=-99;     #Tap2 RT Bin
	   trialarr[k][7]=-99;     #T2
	   trialarr[k][8]=-99;     #T2 Response
	   trialarr[k][9]=-1;      #Accuracy (0 or 1)
      k=k+1;
    end 
end;

 
sub
   shuffle (array<int,2>& trialarr) # name of subroutine; type of argument passed to it; name
begin                               # of variable to be used in subroutine
    int j;
    int pos1;
    int temp1;
    int temp2;
    loop j=1 until j==nTrials begin #fisher yates shuffle
        pos1 = random(j,nTrials); #choose a random number from [current index] to [end]   
        #swap [current index] with [randomly chosen index] 
        temp1 = trialarr[j][1];
        temp2 = trialarr[j][2];
        trialarr[j][1] = trialarr[pos1][1];
        trialarr[j][2] = trialarr[pos1][2];
        trialarr[pos1][1] = temp1;
        trialarr[pos1][2] = temp2;
        #as we iterate through the array, we leave a shuffled deck in our path     
        j=j+1;
    end;  
end; 


int i;
int j;
int k;
int l;
int l3;
int ll;
int m;
int n;
int nn;
int o;
int p;
int p1;
int p2;
int p3;
int pp;
int q;
int r;
int nRSVPs;
array<int> rands[maxRSVPs];
array<int> rands2[nStim];    
int dummy;
int t1acc;
int t2acc;
int xBlocks;
int xTrials;
int bbbueno;
int rd_count1;
int rd_count2;
int letterIdx;

inst_trial.present();

loop xBlocks=1 until xBlocks>nBlocks begin             #actually, do the experiment
   
    init_conds (trialtype);
    shuffle (trialtype);
  
    loop xTrials=1 until xTrials>nTrials begin   
    
        # This part displays the fixation
        fix_trial.present();
    
		  # Set up the "***" alert to tap
        t1.set_caption(targid[22]);
        t1.redraw();
        t1_event.set_duration(9);

		  # Set up the target window + trailing stimuli
        if (trialtype[xTrials][1]==1) then
            rands2[1] = random(1,9);
            loop i=2 until i>nStim begin
               r=random(1,9);
               if (r != rands2[i-1]) then
						rands2[i] = r;
						postt1[i].set_caption(distid[rands2[i]]);
						postt1[i].redraw();
						i = i + 1;
					end;
            end; # end loop
        end; # end if
        
        # This part sets up the second target (letter)
        trialtype[xTrials][7] = random (1, 21);

		  # Insert letter in stimulus sequence at the specified 100ms bin (Lag * 2)
		  letterIdx = trialtype[xTrials][2];
		  postt1[letterIdx*2].set_caption(targid[trialtype[xTrials][7]]);
        postt1[letterIdx*2].redraw();

        # This part sets up the 6-12 RSVP items between the offset of fixation and onset of T1   
        if (trialtype[xTrials][1]==1) then  
				nRSVPs=random(6,maxRSVPs);
				rands[1] = random(1,9);
				loop i=2 until i > nRSVPs begin
					r=random(1,9);
				   if (r != rands[i-1]) then
						rands[i] = r;
						rsvp[i].set_caption(distid[r]);
						rsvp[i].redraw();
						i = i + 1;
					end;
				end;
			end;
			
			# Display the RSVPs
         loop j=1 until j>nRSVPs begin
            rsvpdig_trials[j].present();
			   isi_trial.present();
            j=j+1; 
         end; # end loop

         # Display the "***" alert to tap
         bbbueno=clock.time();
		   rd_count1 = response_manager.response_data_count();
         t1_trial.present();  
         isi_trial.present();     
        
		   # Display the target window + trailing digits
			postt1_trial.present();

		   # store first two taps (if they exist) from onset of postt1_trial
		   rd_count2 = response_manager.response_data_count();
			if (rd_count2 >= rd_count1+1) then
				response_data tap1 = response_manager.get_response_data(rd_count1 + 1);
				trialtype[xTrials][3] = tap1.time() - bbbueno;
				trialtype[xTrials][4] = (trialtype[xTrials][3] / 100) + 1;
				if(rd_count2 >= rd_count1+2) then
					response_data tap2 = response_manager.get_response_data(rd_count1 + 2);
					trialtype[xTrials][5] = tap2.time() - bbbueno;
					trialtype[xTrials][6] = (trialtype[xTrials][5] / 100) + 1;
				end;
			end;

         if (trialtype[xTrials][3]<200) then
            if (trialtype[xTrials][3]<0) then
               fb_msg.set_caption(notap_msg);
					fb_msg.redraw();
					fb_trial.present();
            else
               fb_msg.set_caption(toofast_msg); 
					fb_msg.redraw();
					fb_trial.present();
            end;
         elseif (trialtype[xTrials][5]>1501) then
            fb_msg.set_caption(tooslow_msg); 
            fb_msg.redraw();
				fb_trial.present();
			end;


      # This part displays a blank screen and waits for the T2 response
      t2resp_trial.present();
      t2resp_event.set_target_button(trialtype[xTrials][7]);      #set target button to T2 value
      trialtype[xTrials][8] = response_manager.last_response();

		# Calculate accuracy
		trialtype[xTrials][9] = int(trialtype[xTrials][8] == trialtype[xTrials][7]);
		
      xTrials=xTrials+1; 
    end; # end trial loop

    outstuff (xBlocks, trialtype);       #output trial data to a file named above
    xBlocks=xBlocks+1;
    if (xBlocks < nBlocks+1) then
        block_trial.present();
    end;

end; # end block loop
  
done_trial.present();